<template>
    <div>
        <div class="search-container">
            <el-button v-if="${tableInfo.vueModalName}_${tableInfo.lowerClassName}_select"  class="search-btn" type="primary" icon="el-icon-search" @click="handleSearch">查询</el-button>
            <el-button v-if="${tableInfo.vueModalName}_${tableInfo.lowerClassName}_add"  class="search-btn" type="primary" icon="el-icon-plus" @click="handleAdd">添加</el-button>
            <el-button v-if="${tableInfo.vueModalName}_${tableInfo.lowerClassName}_select"  class="search-btn" :autofocus="true" icon="el-icon-refresh" @click="refreshHandle">刷新</el-button>
        </div>

        <el-table v-if="${tableInfo.vueModalName}_${tableInfo.lowerClassName}_select"  v-loading="listLoading" :data="list" :default-sort="{prop : '$!tableInfo.pk.columnName' }" border highlight-current-row fit>
            <el-table-column align="center" type="index" width="50"></el-table-column>

            #foreach($column in $tableInfo.columnInfo)
                #if($column.columnName == $!tableInfo.pk.columnName)
            <el-table-column align="center" label="${column.attrName}" width="65" prop="${column.attrName}"></el-table-column>
                #else
            <el-table-column align="center" label="${column.columnComment}" width="200px" prop="${column.attrName}"></el-table-column>
                #end
            #end
            <el-table-column align="center" label="操作" width="180" v-if="${tableInfo.vueModalName}_${tableInfo.lowerClassName}_update  || ${tableInfo.vueModalName}_${tableInfo.lowerClassName}_delete ">
                <template slot-scope="scope">
                    <el-button v-if="${tableInfo.vueModalName}_${tableInfo.lowerClassName}_update" size="mini" type="primary" @click="handleEdit(scope.row)">编辑</el-button>
                    <el-button v-if="${tableInfo.vueModalName}_${tableInfo.lowerClassName}_delete" size="mini" type="danger" @click="handleDelete(scope.row)">删除</el-button>
                </template>
            </el-table-column>

        </el-table>

        <div v-show="!listLoading" class="footer">
            <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page.sync="listQuery.current" :page-size="listQuery.size" :page-sizes="[10, 40, 80, 100]" layout="total, sizes, prev, pager, next, jumper" :total="total">
            </el-pagination>
        </div>
        <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
                <el-form :model="form" :rules="rules" ref="form" label-width="100px">
                    #foreach($column in $tableInfo.columnInfo)
                        #if($column.columnName != $tableInfo.pk.columnName)
                            <el-form-item label="${column.columnComment}" prop="${column.attrName}">
                                <el-input v-model="form.${column.attrName}"
                                          placeholder="请输入${column.columnComment}"></el-input>
                            </el-form-item>
                        #end
                    #end
                </el-form>
                <div slot="footer" class="dialog-footer">
                    <el-button @click="cancel('form')">取 消</el-button>
                    <el-button v-if="dialogStatus=='create'" type="primary" @click="create('form')">确 定</el-button>
                    <el-button v-else type="primary" @click="update('form')">确 定</el-button>
                </div>
        </el-dialog>
    </div>
</template>

<script>

    import { query${tableInfo.className}, delete${tableInfo.className}, get${tableInfo.className}, create${tableInfo.className} } from '@/api/${tableInfo.vueModalName}/${tableInfo.lowerClassName}/index'
    import { mapGetters } from 'vuex'

    export default {
        name: '${tableInfo.vueModalName}',
        data() {
            return {
                form: {
                    #foreach($column in $tableInfo.columns)
                        #if($column.columnName != $tableInfo.pk.columnName)
                            ${column.attrName} : undefined #if($velocityCount != $tableInfo.columns.size()),#end
                        #end
                    #end
                },
                rules: {
                #foreach($column in $tableInfo.columns)
                    #if($column.columnName != $tableInfo.pk.columnName)
                        ${column.attrName}: [
                        {
                            required: true,
                            message: '请输入${column.columnComment}',
                            trigger: 'blur'
                        },
                        {
                            min: 3,
                            max: 20,
                            message: '长度在 3 到 20 个字符',
                            trigger: 'blur'
                        }
                    ]#if($velocityCount != $columns.size()), #end#end
                #end
                },
                list: null,
                total: null,
                listLoading: true,
                listQuery: {
                    current: 1,
                    size: 10,
                    username: undefined
                },
                dialogFormVisible: false,
                dialogStatus: '',
                ${tableInfo.vueModalName}_${tableInfo.lowerClassName}_select: false,
                ${tableInfo.vueModalName}_${tableInfo.lowerClassName}_update: false,
                ${tableInfo.vueModalName}_${tableInfo.lowerClassName}_delete: false,
                ${tableInfo.vueModalName}_${tableInfo.lowerClassName}_add: false,
                textMap: {
                    update: '编辑',
                    create: '创建'
                },
                tableKey: 0
            }
        },
        mounted() {
            this.getList();
            this.${tableInfo.vueModalName}_${tableInfo.lowerClassName}_select = this.permissions['/${tableInfo.vueModalName}/${tableInfo.lowerClassName}:select'];
            this.${tableInfo.vueModalName}_${tableInfo.lowerClassName}_update = this.permissions['/${tableInfo.vueModalName}/${tableInfo.lowerClassName}:update'];
            this.${tableInfo.vueModalName}_${tableInfo.lowerClassName}_delete = this.permissions['/${tableInfo.vueModalName}/${tableInfo.lowerClassName}:delete'];
            this.${tableInfo.vueModalName}_${tableInfo.lowerClassName}_add = this.permissions['/${tableInfo.vueModalName}/${tableInfo.lowerClassName}:add'];
        },
        computed: {
            ...mapGetters([
                'permissions'
            ])
        },
        methods: {
            getList() {
                this.listLoading = true;
                query${tableInfo.className}(this.listQuery)
                        .then(response => {
                            this.list = response.data.records
                            this.total = response.data.total
                            this.listLoading = false
                        })
            },
            handleFilter() {
                this.getList();
            },
            handleSizeChange(val) {
                this.listQuery.limit = val;
                this.getList();
            },
            handleCurrentChange(val) {
                this.listQuery.page = val;
                this.getList();
            },
            handleAdd() {
                this.resetTemp();
                this.dialogStatus = 'create';
                this.dialogFormVisible = true;
            },
            handleUpdate(row) {
                get${tableInfo.className}(row.id)
                        .then(response => {
                            this.form = response.data;
                            this.dialogFormVisible = true;
                            this.dialogStatus = 'update';
                        });
            },
            handleDelete(row) {
                this.$confirm('此操作将永久删除, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                })
                        .then(() => {
                            delete${tableInfo.className}(row.id)
                                    .then(() => {
                                        this.$notify({
                                            title: '成功',
                                            message: '删除成功',
                                            type: 'success',
                                            duration: 2000
                                        });
                                        const index = this.list.indexOf(row);
                                        this.list.splice(index, 1);
                                    });
                        });
            },
            create(formName) {
                const set = this.$refs;
                set[formName].validate(valid => {
                    if (valid) {
                        create${tableInfo.className}(this.form)
                                .then(() => {
                                    this.dialogFormVisible = false;
                                    this.getList();
                                    this.$notify({
                                        title: '成功',
                                        message: '创建成功',
                                        type: 'success',
                                        duration: 2000
                                    });
                                })
                    } else {
                        return false;
                    }
                });
            },
            cancel(formName) {
                this.dialogFormVisible = false;
                const set = this.$refs;
                set[formName].resetFields();
            },
            update(formName) {
                const set = this.$refs;
                set[formName].validate(valid => {
                    if (valid) {
                        this.dialogFormVisible = false;
                        this.form.password = undefined;
                        update${tableInfo.className}(this.form.id, this.form).then(() => {
                            this.dialogFormVisible = false;
                            this.getList();
                            this.$notify({
                                title: '成功',
                                message: '创建成功',
                                type: 'success',
                                duration: 2000
                            });
                        });
                    } else {
                        return false;
                    }
                });
            },
            resetTemp() {
                this.form = {
                    username: undefined,
                    name: undefined,
                    sex: '男',
                    password: undefined,
                    description: undefined
                };
            }
        }
    }
</script>
